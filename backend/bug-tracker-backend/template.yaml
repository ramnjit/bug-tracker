AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  bug-tracker-backend

  Backend services for the Bug Tracker application.

Globals:
  Function:
    Timeout: 3
    LoggingConfig:
      LogFormat: JSON

Resources:
  # Define our main API Gateway
  BugTrackerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      # Define the authorizer for this API
      Auth:
        Authorizers:
          JwtAuthorizer:
            FunctionArn: !GetAtt TokenAuthorizerFunction.Arn
            Identity:
              Header: Authorization

  # -- Tables --
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  OrganizationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Organizations
      AttributeDefinitions:
        - AttributeName: orgId
          AttributeType: S
      KeySchema:
        - AttributeName: orgId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # -- Lambda Functions --
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: auth/register.handler
      Runtime: nodejs20.x
      Events:
        RegisterApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /register
            Method: post                        
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: auth/login.handler
      Runtime: nodejs20.x
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /login
            Method: post                         
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          EMAIL_INDEX_NAME: EmailIndex
          JWT_SECRET: "a-super-secret-key-for-dev"

  TokenAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: auth/authorizer.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          JWT_SECRET: "a-super-secret-key-for-dev"

  CreateOrganizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: orgs/create.handler
      Runtime: nodejs20.x
      Events:
        CreateOrgApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /organizations
            Method: post
            Auth:
              Authorizer: JwtAuthorizer # Secure this endpoint
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrganizationsTable
      Environment:
        Variables:
          ORGS_TABLE_NAME: !Ref OrganizationsTable

Outputs:
  BugTrackerApiUrl:
    Description: "API Gateway endpoint URL for the application"
    Value: !Sub "https://://${BugTrackerApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
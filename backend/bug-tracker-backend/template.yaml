AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  bug-tracker-backend

  Backend services for the Bug Tracker application.

Globals:
  Function:
    Timeout: 3
    LoggingConfig:
      LogFormat: JSON

Resources:
  # Define our main API Gateway
  BugTrackerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          JwtAuthorizer:
            FunctionArn: !GetAtt TokenAuthorizerFunction.Arn
            Identity:
              Header: Authorization
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"

  # -- Tables --
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  OrganizationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Organizations
      AttributeDefinitions:
        - AttributeName: orgId
          AttributeType: S
      KeySchema:
        - AttributeName: orgId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  IssuesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Issues
      AttributeDefinitions:
        - AttributeName: issueId
          AttributeType: S
        - AttributeName: orgId
          AttributeType: S
      KeySchema:
        - AttributeName: issueId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: OrgIdIndex
          KeySchema:
            - AttributeName: orgId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Comments
      AttributeDefinitions:
        - AttributeName: commentId
          AttributeType: S
        - AttributeName: issueId
          AttributeType: S
      KeySchema:
        - AttributeName: commentId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: IssueIdIndex
          KeySchema:
            - AttributeName: issueId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # -- SNS for Notifications --
  IssueEventsTopic:
    Type: AWS::SNS::Topic

  # -- Lambda Functions --
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: auth/register.handler
      Runtime: nodejs20.x
      Events:
        RegisterApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /register
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: auth/login.handler
      Runtime: nodejs20.x
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /login
            Method: post
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          EMAIL_INDEX_NAME: EmailIndex
          JWT_SECRET: "a-super-secret-key-for-dev"

  TokenAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: auth/authorizer.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          JWT_SECRET: "a-super-secret-key-for-dev"

  CreateOrganizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: orgs/create.handler
      Runtime: nodejs20.x
      Events:
        CreateOrgApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /organizations
            Method: post
            Auth:
              Authorizer: JwtAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrganizationsTable
      Environment:
        Variables:
          ORGS_TABLE_NAME: !Ref OrganizationsTable

  CreateIssueFunctionV2:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/issues/create.handler
      Runtime: nodejs20.x
      Events:
        CreateIssueApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /organizations/{orgId}/issues
            Method: post
            Auth:
              Authorizer: JwtAuthorizer
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: !GetAtt IssuesTable.Arn
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt IssueEventsTopic.TopicName
      Environment:
        Variables:
          ISSUES_TABLE_NAME: !Ref IssuesTable
          ISSUE_EVENTS_TOPIC_ARN: !Ref IssueEventsTopic

  ListIssuesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: issues/list.handler
      Runtime: nodejs20.x
      Events:
        ListIssuesApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /organizations/{orgId}/issues
            Method: get
            Auth:
              Authorizer: JwtAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref IssuesTable
      Environment:
        Variables:
          ISSUES_TABLE_NAME: !Ref IssuesTable
          ORG_ID_INDEX_NAME: OrgIdIndex

  CreateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: comments/create.handler
      Runtime: nodejs20.x
      Events:
        CreateCommentApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /issues/{issueId}/comments
            Method: post
            Auth:
              Authorizer: JwtAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsTable
      Environment:
        Variables:
          COMMENTS_TABLE_NAME: !Ref CommentsTable

  ListCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: comments/list.handler
      Runtime: nodejs20.x
      Events:
        ListCommentsApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /issues/{issueId}/comments
            Method: get
            Auth:
              Authorizer: JwtAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CommentsTable
      Environment:
        Variables:
          COMMENTS_TABLE_NAME: !Ref CommentsTable
          ISSUE_ID_INDEX_NAME: IssueIdIndex

  NotificationProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/
      Handler: notifications/processor.handler
      Runtime: nodejs20.x
      Events:
        TopicEvent:
          Type: SNS
          Properties:
            Topic: !Ref IssueEventsTopic

  TestAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event) => {
          return {
            statusCode: 200,
            body: JSON.stringify({ message: "Success!", authorizer: event.requestContext.authorizer }),
          };
        };
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        TestApi:
          Type: Api
          Properties:
            RestApiId: !Ref BugTrackerApi
            Path: /test
            Method: get
            Auth:
              Authorizer: JwtAuthorizer

Outputs:
  BugTrackerApiUrl:
    Description: "API Gateway endpoint URL for the application"
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref BugTrackerApi
        - '.execute-api.'
        - !Ref AWS::Region
        - '.amazonaws.com/Prod/'